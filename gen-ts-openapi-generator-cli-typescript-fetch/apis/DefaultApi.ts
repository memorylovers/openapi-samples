/* tslint:disable */
/* eslint-disable */
/**
 * Pet Store Service
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Pet,
  PetListResults,
  ToyListResults,
} from '../models/index';
import {
    PetFromJSON,
    PetToJSON,
    PetListResultsFromJSON,
    PetListResultsToJSON,
    ToyListResultsFromJSON,
    ToyListResultsToJSON,
} from '../models/index';

export interface ListPetToysResponseListRequest {
    petId: string;
    nameFilter: string;
}

export interface PetsCreateRequest {
    pet: Pet;
}

export interface PetsDeleteRequest {
    petId: number;
}

export interface PetsListRequest {
    nextLink?: string;
}

export interface PetsReadRequest {
    petId: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async listPetToysResponseListRaw(requestParameters: ListPetToysResponseListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToyListResults>> {
        if (requestParameters.petId === null || requestParameters.petId === undefined) {
            throw new runtime.RequiredError('petId','Required parameter requestParameters.petId was null or undefined when calling listPetToysResponseList.');
        }

        if (requestParameters.nameFilter === null || requestParameters.nameFilter === undefined) {
            throw new runtime.RequiredError('nameFilter','Required parameter requestParameters.nameFilter was null or undefined when calling listPetToysResponseList.');
        }

        const queryParameters: any = {};

        if (requestParameters.nameFilter !== undefined) {
            queryParameters['nameFilter'] = requestParameters.nameFilter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pets/{petId}/toys`.replace(`{${"petId"}}`, encodeURIComponent(String(requestParameters.petId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToyListResultsFromJSON(jsonValue));
    }

    /**
     */
    async listPetToysResponseList(requestParameters: ListPetToysResponseListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToyListResults> {
        const response = await this.listPetToysResponseListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async petsCreateRaw(requestParameters: PetsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pet>> {
        if (requestParameters.pet === null || requestParameters.pet === undefined) {
            throw new runtime.RequiredError('pet','Required parameter requestParameters.pet was null or undefined when calling petsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/pets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PetToJSON(requestParameters.pet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PetFromJSON(jsonValue));
    }

    /**
     */
    async petsCreate(requestParameters: PetsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pet> {
        const response = await this.petsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a pet.
     */
    async petsDeleteRaw(requestParameters: PetsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.petId === null || requestParameters.petId === undefined) {
            throw new runtime.RequiredError('petId','Required parameter requestParameters.petId was null or undefined when calling petsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pets/{petId}`.replace(`{${"petId"}}`, encodeURIComponent(String(requestParameters.petId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a pet.
     */
    async petsDelete(requestParameters: PetsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.petsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * <blink>List pets.</blink>
     */
    async petsListRaw(requestParameters: PetsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PetListResults>> {
        const queryParameters: any = {};

        if (requestParameters.nextLink !== undefined) {
            queryParameters['nextLink'] = requestParameters.nextLink;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PetListResultsFromJSON(jsonValue));
    }

    /**
     * <blink>List pets.</blink>
     */
    async petsList(requestParameters: PetsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PetListResults> {
        const response = await this.petsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a pet. Supports eTags.
     */
    async petsReadRaw(requestParameters: PetsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pet>> {
        if (requestParameters.petId === null || requestParameters.petId === undefined) {
            throw new runtime.RequiredError('petId','Required parameter requestParameters.petId was null or undefined when calling petsRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pets/{petId}`.replace(`{${"petId"}}`, encodeURIComponent(String(requestParameters.petId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PetFromJSON(jsonValue));
    }

    /**
     * Returns a pet. Supports eTags.
     */
    async petsRead(requestParameters: PetsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pet> {
        const response = await this.petsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
